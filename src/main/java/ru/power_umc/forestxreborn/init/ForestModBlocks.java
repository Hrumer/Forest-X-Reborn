
/*
 *    MCreator note: This file will be REGENERATED on each build.
 */
package ru.power_umc.forestxreborn.init;

import ru.power_umc.forestxreborn.block.YellowStairsBlock;
import ru.power_umc.forestxreborn.block.YellowSlabBlock;
import ru.power_umc.forestxreborn.block.YellowPlanksBlock;
import ru.power_umc.forestxreborn.block.YellowFenceGateBlock;
import ru.power_umc.forestxreborn.block.YellowFenceBlock;
import ru.power_umc.forestxreborn.block.WildflowerBlock;
import ru.power_umc.forestxreborn.block.WhiteStairsBlock;
import ru.power_umc.forestxreborn.block.WhiteSlabBlock;
import ru.power_umc.forestxreborn.block.WhiteRoseBushBlock;
import ru.power_umc.forestxreborn.block.WhitePlanksBlock;
import ru.power_umc.forestxreborn.block.WhiteFenceGateBlock;
import ru.power_umc.forestxreborn.block.WhiteFenceBlock;
import ru.power_umc.forestxreborn.block.WarpedParquetBlock;
import ru.power_umc.forestxreborn.block.TruncatedPumiceWallBlock;
import ru.power_umc.forestxreborn.block.TruncatedPumiceStairsBlock;
import ru.power_umc.forestxreborn.block.TruncatedPumiceSlabBlock;
import ru.power_umc.forestxreborn.block.TruncatedPumiceBlock;
import ru.power_umc.forestxreborn.block.TruncatedCarvedPumiceBlock;
import ru.power_umc.forestxreborn.block.TropicalParquetBlock;
import ru.power_umc.forestxreborn.block.SunshroomBlock;
import ru.power_umc.forestxreborn.block.StrippedMulberryWoodBlock;
import ru.power_umc.forestxreborn.block.StrippedMulberryLogBlock;
import ru.power_umc.forestxreborn.block.StrippedEucalyptusWoodBlock;
import ru.power_umc.forestxreborn.block.StrippedEucalyptusLogBlock;
import ru.power_umc.forestxreborn.block.SpruceParquetBlock;
import ru.power_umc.forestxreborn.block.SnailShellBlock;
import ru.power_umc.forestxreborn.block.SilverOreBlock;
import ru.power_umc.forestxreborn.block.SilverBlockBlock;
import ru.power_umc.forestxreborn.block.SandslateFacetedBricksBlock;
import ru.power_umc.forestxreborn.block.SandslateBricksWallBlock;
import ru.power_umc.forestxreborn.block.SandslateBricksStairsBlock;
import ru.power_umc.forestxreborn.block.SandslateBricksSlabBlock;
import ru.power_umc.forestxreborn.block.SandslateBricksBlock;
import ru.power_umc.forestxreborn.block.SandslateBlock;
import ru.power_umc.forestxreborn.block.RyeStage7Block;
import ru.power_umc.forestxreborn.block.RyeStage6Block;
import ru.power_umc.forestxreborn.block.RyeStage5Block;
import ru.power_umc.forestxreborn.block.RyeStage4Block;
import ru.power_umc.forestxreborn.block.RyeStage3Block;
import ru.power_umc.forestxreborn.block.RyeStage2Block;
import ru.power_umc.forestxreborn.block.RyeStage1Block;
import ru.power_umc.forestxreborn.block.RyeStage0Block;
import ru.power_umc.forestxreborn.block.RhyoliteWallBlock;
import ru.power_umc.forestxreborn.block.RhyoliteStairsBlock;
import ru.power_umc.forestxreborn.block.RhyoliteSlabBlock;
import ru.power_umc.forestxreborn.block.RhyoliteBricksWallBlock;
import ru.power_umc.forestxreborn.block.RhyoliteBricksStairsBlock;
import ru.power_umc.forestxreborn.block.RhyoliteBricksSlabBlock;
import ru.power_umc.forestxreborn.block.RhyoliteBricksBlock;
import ru.power_umc.forestxreborn.block.RhyoliteBlock;
import ru.power_umc.forestxreborn.block.RedStairsBlock;
import ru.power_umc.forestxreborn.block.RedSlabBlock;
import ru.power_umc.forestxreborn.block.RedPlanksBlock;
import ru.power_umc.forestxreborn.block.RedFenceGateBlock;
import ru.power_umc.forestxreborn.block.RedFenceBlock;
import ru.power_umc.forestxreborn.block.RedCrushedSandstoneWallBlock;
import ru.power_umc.forestxreborn.block.RedCrushedSandstoneStairsBlock;
import ru.power_umc.forestxreborn.block.RedCrushedSandstoneSlabBlock;
import ru.power_umc.forestxreborn.block.RedCrushedSandstoneBlock;
import ru.power_umc.forestxreborn.block.RawSilverBlockBlock;
import ru.power_umc.forestxreborn.block.RawGingerbreadBlockBlock;
import ru.power_umc.forestxreborn.block.RaspberryBush3Block;
import ru.power_umc.forestxreborn.block.RaspberryBush2Block;
import ru.power_umc.forestxreborn.block.RaspberryBush1Block;
import ru.power_umc.forestxreborn.block.RaspberryBush0Block;
import ru.power_umc.forestxreborn.block.PurpleStairsBlock;
import ru.power_umc.forestxreborn.block.PurpleSlabBlock;
import ru.power_umc.forestxreborn.block.PurplePlanksBlock;
import ru.power_umc.forestxreborn.block.PurpleFenceGateBlock;
import ru.power_umc.forestxreborn.block.PurpleFenceBlock;
import ru.power_umc.forestxreborn.block.PumiceWallBlock;
import ru.power_umc.forestxreborn.block.PumiceStairsBlock;
import ru.power_umc.forestxreborn.block.PumiceSlabBlock;
import ru.power_umc.forestxreborn.block.PumiceBricksWallBlock;
import ru.power_umc.forestxreborn.block.PumiceBricksStairsBlock;
import ru.power_umc.forestxreborn.block.PumiceBricksSlabBlock;
import ru.power_umc.forestxreborn.block.PumiceBricksBlock;
import ru.power_umc.forestxreborn.block.PumiceBlock;
import ru.power_umc.forestxreborn.block.PolishedSandslateWallBlock;
import ru.power_umc.forestxreborn.block.PolishedSandslateStairsBlock;
import ru.power_umc.forestxreborn.block.PolishedSandslateSlabBlock;
import ru.power_umc.forestxreborn.block.PolishedSandslateBlock;
import ru.power_umc.forestxreborn.block.PolishedRhyoliteWallBlock;
import ru.power_umc.forestxreborn.block.PolishedRhyoliteStairsBlock;
import ru.power_umc.forestxreborn.block.PolishedRhyoliteSlabBlock;
import ru.power_umc.forestxreborn.block.PolishedRhyoliteBlock;
import ru.power_umc.forestxreborn.block.PolishedPumiceWallBlock;
import ru.power_umc.forestxreborn.block.PolishedPumiceStairsBlock;
import ru.power_umc.forestxreborn.block.PolishedPumiceSlabBlock;
import ru.power_umc.forestxreborn.block.PolishedPumiceBlock;
import ru.power_umc.forestxreborn.block.PolishedMarbleWallBlock;
import ru.power_umc.forestxreborn.block.PolishedMarbleStairsBlock;
import ru.power_umc.forestxreborn.block.PolishedMarbleSlabBlock;
import ru.power_umc.forestxreborn.block.PolishedMarbleBlock;
import ru.power_umc.forestxreborn.block.PolarBearCarpetBlock;
import ru.power_umc.forestxreborn.block.PinkStairsBlock;
import ru.power_umc.forestxreborn.block.PinkSlabBlock;
import ru.power_umc.forestxreborn.block.PinkRoseBushBlock;
import ru.power_umc.forestxreborn.block.PinkPlanksBlock;
import ru.power_umc.forestxreborn.block.PinkFenceGateBlock;
import ru.power_umc.forestxreborn.block.PinkFenceBlock;
import ru.power_umc.forestxreborn.block.PeatBlock;
import ru.power_umc.forestxreborn.block.OrangeStairsBlock;
import ru.power_umc.forestxreborn.block.OrangeSlabBlock;
import ru.power_umc.forestxreborn.block.OrangePlanksBlock;
import ru.power_umc.forestxreborn.block.OrangeFenceGateBlock;
import ru.power_umc.forestxreborn.block.OrangeFenceBlock;
import ru.power_umc.forestxreborn.block.OakParquetBlock;
import ru.power_umc.forestxreborn.block.MulberryWoodBlock;
import ru.power_umc.forestxreborn.block.MulberryTrapdoorBlock;
import ru.power_umc.forestxreborn.block.MulberryStairsBlock;
import ru.power_umc.forestxreborn.block.MulberrySlabBlock;
import ru.power_umc.forestxreborn.block.MulberrySaplingBlock;
import ru.power_umc.forestxreborn.block.MulberryPressurePlateBlock;
import ru.power_umc.forestxreborn.block.MulberryPlanksBlock;
import ru.power_umc.forestxreborn.block.MulberryParquetBlock;
import ru.power_umc.forestxreborn.block.MulberryLogBlock;
import ru.power_umc.forestxreborn.block.MulberryLeavesWithoutWhiteBlock;
import ru.power_umc.forestxreborn.block.MulberryLeavesWithoutBlackBlock;
import ru.power_umc.forestxreborn.block.MulberryLeavesWithWhiteBlock;
import ru.power_umc.forestxreborn.block.MulberryLeavesWithBlackBlock;
import ru.power_umc.forestxreborn.block.MulberryFenceGateBlock;
import ru.power_umc.forestxreborn.block.MulberryFenceBlock;
import ru.power_umc.forestxreborn.block.MulberryDoorBlock;
import ru.power_umc.forestxreborn.block.MulberryButtonBlock;
import ru.power_umc.forestxreborn.block.MoonshroomBlock;
import ru.power_umc.forestxreborn.block.MarbleBricksWallBlock;
import ru.power_umc.forestxreborn.block.MarbleBricksStairsBlock;
import ru.power_umc.forestxreborn.block.MarbleBricksSlabBlock;
import ru.power_umc.forestxreborn.block.MarbleBricksBlock;
import ru.power_umc.forestxreborn.block.MarbleBlock;
import ru.power_umc.forestxreborn.block.MangroveParquetBlock;
import ru.power_umc.forestxreborn.block.MagentaStairsBlock;
import ru.power_umc.forestxreborn.block.MagentaSlabBlock;
import ru.power_umc.forestxreborn.block.MagentaPlanksBlock;
import ru.power_umc.forestxreborn.block.MagentaFenceGateBlock;
import ru.power_umc.forestxreborn.block.MagentaFenceBlock;
import ru.power_umc.forestxreborn.block.LimeStairsBlock;
import ru.power_umc.forestxreborn.block.LimeSlabBlock;
import ru.power_umc.forestxreborn.block.LimePlanksBlock;
import ru.power_umc.forestxreborn.block.LimeFenceGateBlock;
import ru.power_umc.forestxreborn.block.LimeFenceBlock;
import ru.power_umc.forestxreborn.block.LightGrayStairsBlock;
import ru.power_umc.forestxreborn.block.LightGraySlabBlock;
import ru.power_umc.forestxreborn.block.LightGrayPlanksBlock;
import ru.power_umc.forestxreborn.block.LightGrayFenceGateBlock;
import ru.power_umc.forestxreborn.block.LightGrayFenceBlock;
import ru.power_umc.forestxreborn.block.LightBlueStairsBlock;
import ru.power_umc.forestxreborn.block.LightBlueSlabBlock;
import ru.power_umc.forestxreborn.block.LightBluePlanksBlock;
import ru.power_umc.forestxreborn.block.LightBlueFenceGateBlock;
import ru.power_umc.forestxreborn.block.LightBlueFenceBlock;
import ru.power_umc.forestxreborn.block.LettuceStage3Block;
import ru.power_umc.forestxreborn.block.LettuceStage2Block;
import ru.power_umc.forestxreborn.block.LettuceStage1Block;
import ru.power_umc.forestxreborn.block.LettuceStage0Block;
import ru.power_umc.forestxreborn.block.LavanderBlock;
import ru.power_umc.forestxreborn.block.GreenStairsBlock;
import ru.power_umc.forestxreborn.block.GreenSlabBlock;
import ru.power_umc.forestxreborn.block.GreenPlanksBlock;
import ru.power_umc.forestxreborn.block.GreenFenceGateBlock;
import ru.power_umc.forestxreborn.block.GreenFenceBlock;
import ru.power_umc.forestxreborn.block.GrayStairsBlock;
import ru.power_umc.forestxreborn.block.GraySlabBlock;
import ru.power_umc.forestxreborn.block.GrayPlanksBlock;
import ru.power_umc.forestxreborn.block.GrayFenceGateBlock;
import ru.power_umc.forestxreborn.block.GrayFenceBlock;
import ru.power_umc.forestxreborn.block.GrapeVine1Block;
import ru.power_umc.forestxreborn.block.GrapeVine0Block;
import ru.power_umc.forestxreborn.block.GingerbreadBricksBlock;
import ru.power_umc.forestxreborn.block.GingerbreadBlockBlock;
import ru.power_umc.forestxreborn.block.FermentationBarrelBlock;
import ru.power_umc.forestxreborn.block.EucalyptusWoodBlock;
import ru.power_umc.forestxreborn.block.EucalyptusTrapdoorBlock;
import ru.power_umc.forestxreborn.block.EucalyptusStairsBlock;
import ru.power_umc.forestxreborn.block.EucalyptusSlabBlock;
import ru.power_umc.forestxreborn.block.EucalyptusSaplingBlock;
import ru.power_umc.forestxreborn.block.EucalyptusPressurePlateBlock;
import ru.power_umc.forestxreborn.block.EucalyptusPlanksBlock;
import ru.power_umc.forestxreborn.block.EucalyptusParquetBlock;
import ru.power_umc.forestxreborn.block.EucalyptusLogBlock;
import ru.power_umc.forestxreborn.block.EucalyptusLeavesBlock;
import ru.power_umc.forestxreborn.block.EucalyptusFenceGateBlock;
import ru.power_umc.forestxreborn.block.EucalyptusFenceBlock;
import ru.power_umc.forestxreborn.block.EucalyptusDoorBlock;
import ru.power_umc.forestxreborn.block.EucalyptusButtonBlock;
import ru.power_umc.forestxreborn.block.DesertRoseBlock;
import ru.power_umc.forestxreborn.block.DenseWebWithSpiderBlock;
import ru.power_umc.forestxreborn.block.DenseWebBlock;
import ru.power_umc.forestxreborn.block.DeepslateSilverOreBlock;
import ru.power_umc.forestxreborn.block.DarkOakParquetBlock;
import ru.power_umc.forestxreborn.block.CyanStairsBlock;
import ru.power_umc.forestxreborn.block.CyanSlabBlock;
import ru.power_umc.forestxreborn.block.CyanPlanksBlock;
import ru.power_umc.forestxreborn.block.CyanFenceGateBlock;
import ru.power_umc.forestxreborn.block.CyanFenceBlock;
import ru.power_umc.forestxreborn.block.CrushedSandstoneWallBlock;
import ru.power_umc.forestxreborn.block.CrushedSandstoneStairsBlock;
import ru.power_umc.forestxreborn.block.CrushedSandstoneSlabBlock;
import ru.power_umc.forestxreborn.block.CrushedSandstoneBlock;
import ru.power_umc.forestxreborn.block.CrimsonParquetBlock;
import ru.power_umc.forestxreborn.block.CobbledSandslateWallBlock;
import ru.power_umc.forestxreborn.block.CobbledSandslateStairsBlock;
import ru.power_umc.forestxreborn.block.CobbledSandslateSlabBlock;
import ru.power_umc.forestxreborn.block.CobbledSandslateBlock;
import ru.power_umc.forestxreborn.block.ChiseledRhyoliteBlock;
import ru.power_umc.forestxreborn.block.CherryParquetBlock;
import ru.power_umc.forestxreborn.block.CattailBlock;
import ru.power_umc.forestxreborn.block.BurningblossomBlock;
import ru.power_umc.forestxreborn.block.BrownStairsBlock;
import ru.power_umc.forestxreborn.block.BrownSlabBlock;
import ru.power_umc.forestxreborn.block.BrownPlanksBlock;
import ru.power_umc.forestxreborn.block.BrownFenceGateBlock;
import ru.power_umc.forestxreborn.block.BrownFenceBlock;
import ru.power_umc.forestxreborn.block.BrownBearCarpetBlock;
import ru.power_umc.forestxreborn.block.BlueberryBush1Block;
import ru.power_umc.forestxreborn.block.BlueberryBush0Block;
import ru.power_umc.forestxreborn.block.BlueStairsBlock;
import ru.power_umc.forestxreborn.block.BlueSlabBlock;
import ru.power_umc.forestxreborn.block.BlueRoseBlock;
import ru.power_umc.forestxreborn.block.BluePlanksBlock;
import ru.power_umc.forestxreborn.block.BlueFenceGateBlock;
import ru.power_umc.forestxreborn.block.BlueFenceBlock;
import ru.power_umc.forestxreborn.block.BlackStairsBlock;
import ru.power_umc.forestxreborn.block.BlackSlabBlock;
import ru.power_umc.forestxreborn.block.BlackPlanksBlock;
import ru.power_umc.forestxreborn.block.BlackFenceGateBlock;
import ru.power_umc.forestxreborn.block.BlackFenceBlock;
import ru.power_umc.forestxreborn.block.BirchParquetBlock;
import ru.power_umc.forestxreborn.block.AshCoverBlock;
import ru.power_umc.forestxreborn.block.AshBlockBlock;
import ru.power_umc.forestxreborn.block.AcaciaParquetBlock;
import ru.power_umc.forestxreborn.ForestMod;

import net.neoforged.neoforge.registries.DeferredRegister;
import net.neoforged.neoforge.registries.DeferredHolder;
import net.neoforged.neoforge.client.event.RegisterColorHandlersEvent;
import net.neoforged.fml.common.EventBusSubscriber;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.api.distmarker.Dist;

import net.minecraft.world.level.block.Block;

public class ForestModBlocks {
	public static final DeferredRegister.Blocks REGISTRY = DeferredRegister.createBlocks(ForestMod.MODID);
	public static final DeferredHolder<Block, Block> SILVER_ORE = REGISTRY.register("silver_ore", SilverOreBlock::new);
	public static final DeferredHolder<Block, Block> SILVER_BLOCK = REGISTRY.register("silver_block", SilverBlockBlock::new);
	public static final DeferredHolder<Block, Block> WILDFLOWER = REGISTRY.register("wildflower", WildflowerBlock::new);
	public static final DeferredHolder<Block, Block> LAVANDER = REGISTRY.register("lavander", LavanderBlock::new);
	public static final DeferredHolder<Block, Block> BURNING_BLOSSOM = REGISTRY.register("burning_blossom", BurningblossomBlock::new);
	public static final DeferredHolder<Block, Block> CRUSHED_SANDSTONE = REGISTRY.register("crushed_sandstone", CrushedSandstoneBlock::new);
	public static final DeferredHolder<Block, Block> RED_CRUSHED_SANDSTONE = REGISTRY.register("red_crushed_sandstone", RedCrushedSandstoneBlock::new);
	public static final DeferredHolder<Block, Block> CRUSHED_SANDSTONE_STAIRS = REGISTRY.register("crushed_sandstone_stairs", CrushedSandstoneStairsBlock::new);
	public static final DeferredHolder<Block, Block> CRUSHED_SANDSTONE_SLAB = REGISTRY.register("crushed_sandstone_slab", CrushedSandstoneSlabBlock::new);
	public static final DeferredHolder<Block, Block> CRUSHED_SANDSTONE_WALL = REGISTRY.register("crushed_sandstone_wall", CrushedSandstoneWallBlock::new);
	public static final DeferredHolder<Block, Block> RED_CRUSHED_SANDSTONE_STAIRS = REGISTRY.register("red_crushed_sandstone_stairs", RedCrushedSandstoneStairsBlock::new);
	public static final DeferredHolder<Block, Block> RED_CRUSHED_SANDSTONE_SLAB = REGISTRY.register("red_crushed_sandstone_slab", RedCrushedSandstoneSlabBlock::new);
	public static final DeferredHolder<Block, Block> RED_CRUSHED_SANDSTONE_WALL = REGISTRY.register("red_crushed_sandstone_wall", RedCrushedSandstoneWallBlock::new);
	public static final DeferredHolder<Block, Block> DEEPSLATE_SILVER_ORE = REGISTRY.register("deepslate_silver_ore", DeepslateSilverOreBlock::new);
	public static final DeferredHolder<Block, Block> SNAIL_SHELL = REGISTRY.register("snail_shell", SnailShellBlock::new);
	public static final DeferredHolder<Block, Block> OAK_PARQUET = REGISTRY.register("oak_parquet", OakParquetBlock::new);
	public static final DeferredHolder<Block, Block> BIRCH_PARQUET = REGISTRY.register("birch_parquet", BirchParquetBlock::new);
	public static final DeferredHolder<Block, Block> SPRUCE_PARQUET = REGISTRY.register("spruce_parquet", SpruceParquetBlock::new);
	public static final DeferredHolder<Block, Block> ACACIA_PARQUET = REGISTRY.register("acacia_parquet", AcaciaParquetBlock::new);
	public static final DeferredHolder<Block, Block> TROPICAL_PARQUET = REGISTRY.register("tropical_parquet", TropicalParquetBlock::new);
	public static final DeferredHolder<Block, Block> CRIMSON_PARQUET = REGISTRY.register("crimson_parquet", CrimsonParquetBlock::new);
	public static final DeferredHolder<Block, Block> WARPED_PARQUET = REGISTRY.register("warped_parquet", WarpedParquetBlock::new);
	public static final DeferredHolder<Block, Block> PUMICE = REGISTRY.register("pumice", PumiceBlock::new);
	public static final DeferredHolder<Block, Block> PEAT = REGISTRY.register("peat", PeatBlock::new);
	public static final DeferredHolder<Block, Block> MARBLE = REGISTRY.register("marble", MarbleBlock::new);
	public static final DeferredHolder<Block, Block> MARBLE_BRICKS = REGISTRY.register("marble_bricks", MarbleBricksBlock::new);
	public static final DeferredHolder<Block, Block> POLISHED_MARBLE = REGISTRY.register("polished_marble", PolishedMarbleBlock::new);
	public static final DeferredHolder<Block, Block> POLISHED_MARBLE_SLAB = REGISTRY.register("polished_marble_slab", PolishedMarbleSlabBlock::new);
	public static final DeferredHolder<Block, Block> MARBLE_BRICKS_SLAB = REGISTRY.register("marble_bricks_slab", MarbleBricksSlabBlock::new);
	public static final DeferredHolder<Block, Block> POLISHED_MARBLE_STAIRS = REGISTRY.register("polished_marble_stairs", PolishedMarbleStairsBlock::new);
	public static final DeferredHolder<Block, Block> MARBLE_BRICKS_STAIRS = REGISTRY.register("marble_bricks_stairs", MarbleBricksStairsBlock::new);
	public static final DeferredHolder<Block, Block> RAW_SILVER_BLOCK = REGISTRY.register("raw_silver_block", RawSilverBlockBlock::new);
	public static final DeferredHolder<Block, Block> DARK_OAK_PARQUET = REGISTRY.register("dark_oak_parquet", DarkOakParquetBlock::new);
	public static final DeferredHolder<Block, Block> DESERT_ROSE = REGISTRY.register("desert_rose", DesertRoseBlock::new);
	public static final DeferredHolder<Block, Block> MANGROVE_PARQUET = REGISTRY.register("mangrove_parquet", MangroveParquetBlock::new);
	public static final DeferredHolder<Block, Block> DENSE_WEB = REGISTRY.register("dense_web", DenseWebBlock::new);
	public static final DeferredHolder<Block, Block> DENSE_WEB_WITH_SPIDER = REGISTRY.register("dense_web_with_spider", DenseWebWithSpiderBlock::new);
	public static final DeferredHolder<Block, Block> RHYOLITE = REGISTRY.register("rhyolite", RhyoliteBlock::new);
	public static final DeferredHolder<Block, Block> POLISHED_RHYOLITE = REGISTRY.register("polished_rhyolite", PolishedRhyoliteBlock::new);
	public static final DeferredHolder<Block, Block> RHYOLITE_BRICKS = REGISTRY.register("rhyolite_bricks", RhyoliteBricksBlock::new);
	public static final DeferredHolder<Block, Block> SANDSLATE = REGISTRY.register("sandslate", SandslateBlock::new);
	public static final DeferredHolder<Block, Block> CHISELED_RHYOLITE = REGISTRY.register("chiseled_rhyolite", ChiseledRhyoliteBlock::new);
	public static final DeferredHolder<Block, Block> MARBLE_BRICKS_WALL = REGISTRY.register("marble_bricks_wall", MarbleBricksWallBlock::new);
	public static final DeferredHolder<Block, Block> POLISHED_MARBLE_WALL = REGISTRY.register("polished_marble_wall", PolishedMarbleWallBlock::new);
	public static final DeferredHolder<Block, Block> BLUEBERRY_BUSH_0 = REGISTRY.register("blueberry_bush_0", BlueberryBush0Block::new);
	public static final DeferredHolder<Block, Block> BLUEBERRY_BUSH_1 = REGISTRY.register("blueberry_bush_1", BlueberryBush1Block::new);
	public static final DeferredHolder<Block, Block> POLISHED_PUMICE = REGISTRY.register("polished_pumice", PolishedPumiceBlock::new);
	public static final DeferredHolder<Block, Block> PUMICE_BRICKS = REGISTRY.register("pumice_bricks", PumiceBricksBlock::new);
	public static final DeferredHolder<Block, Block> LETTUCE_STAGE_0 = REGISTRY.register("lettuce_stage_0", LettuceStage0Block::new);
	public static final DeferredHolder<Block, Block> LETTUCE_STAGE_1 = REGISTRY.register("lettuce_stage_1", LettuceStage1Block::new);
	public static final DeferredHolder<Block, Block> LETTUCE_STAGE_2 = REGISTRY.register("lettuce_stage_2", LettuceStage2Block::new);
	public static final DeferredHolder<Block, Block> LETTUCE_STAGE_3 = REGISTRY.register("lettuce_stage_3", LettuceStage3Block::new);
	public static final DeferredHolder<Block, Block> POLISHED_SANDSLATE = REGISTRY.register("polished_sandslate", PolishedSandslateBlock::new);
	public static final DeferredHolder<Block, Block> SANDSLATE_FACETED_BRICKS = REGISTRY.register("sandslate_faceted_bricks", SandslateFacetedBricksBlock::new);
	public static final DeferredHolder<Block, Block> COBBLED_SANDSLATE = REGISTRY.register("cobbled_sandslate", CobbledSandslateBlock::new);
	public static final DeferredHolder<Block, Block> TRUNCATED_PUMICE = REGISTRY.register("truncated_pumice", TruncatedPumiceBlock::new);
	public static final DeferredHolder<Block, Block> TRUNCATED_CARVED_PUMICE = REGISTRY.register("truncated_carved_pumice", TruncatedCarvedPumiceBlock::new);
	public static final DeferredHolder<Block, Block> SANDSLATE_BRICKS = REGISTRY.register("sandslate_bricks", SandslateBricksBlock::new);
	public static final DeferredHolder<Block, Block> POLISHED_RHYOLITE_SLAB = REGISTRY.register("polished_rhyolite_slab", PolishedRhyoliteSlabBlock::new);
	public static final DeferredHolder<Block, Block> POLISHED_RHYOLITE_STAIRS = REGISTRY.register("polished_rhyolite_stairs", PolishedRhyoliteStairsBlock::new);
	public static final DeferredHolder<Block, Block> RHYOLITE_BRICKS_SLAB = REGISTRY.register("rhyolite_bricks_slab", RhyoliteBricksSlabBlock::new);
	public static final DeferredHolder<Block, Block> RHYOLITE_BRICKS_STAIRS = REGISTRY.register("rhyolite_bricks_stairs", RhyoliteBricksStairsBlock::new);
	public static final DeferredHolder<Block, Block> POLISHED_RHYOLITE_WALL = REGISTRY.register("polished_rhyolite_wall", PolishedRhyoliteWallBlock::new);
	public static final DeferredHolder<Block, Block> RHYOLITE_BRICKS_WALL = REGISTRY.register("rhyolite_bricks_wall", RhyoliteBricksWallBlock::new);
	public static final DeferredHolder<Block, Block> RHYOLITE_SLAB = REGISTRY.register("rhyolite_slab", RhyoliteSlabBlock::new);
	public static final DeferredHolder<Block, Block> RHYOLITE_STAIRS = REGISTRY.register("rhyolite_stairs", RhyoliteStairsBlock::new);
	public static final DeferredHolder<Block, Block> RHYOLITE_WALL = REGISTRY.register("rhyolite_wall", RhyoliteWallBlock::new);
	public static final DeferredHolder<Block, Block> POLISHED_PUMICE_SLAB = REGISTRY.register("polished_pumice_slab", PolishedPumiceSlabBlock::new);
	public static final DeferredHolder<Block, Block> POLISHED_PUMICE_STAIRS = REGISTRY.register("polished_pumice_stairs", PolishedPumiceStairsBlock::new);
	public static final DeferredHolder<Block, Block> POLISHED_PUMICE_WALL = REGISTRY.register("polished_pumice_wall", PolishedPumiceWallBlock::new);
	public static final DeferredHolder<Block, Block> PUMICE_BRICKS_SLAB = REGISTRY.register("pumice_bricks_slab", PumiceBricksSlabBlock::new);
	public static final DeferredHolder<Block, Block> PUMICE_BRICKS_STAIRS = REGISTRY.register("pumice_bricks_stairs", PumiceBricksStairsBlock::new);
	public static final DeferredHolder<Block, Block> PUMICE_BRICKS_WALL = REGISTRY.register("pumice_bricks_wall", PumiceBricksWallBlock::new);
	public static final DeferredHolder<Block, Block> TRUNCATED_PUMICE_SLAB = REGISTRY.register("truncated_pumice_slab", TruncatedPumiceSlabBlock::new);
	public static final DeferredHolder<Block, Block> TRUNCATED_PUMICE_STAIRS = REGISTRY.register("truncated_pumice_stairs", TruncatedPumiceStairsBlock::new);
	public static final DeferredHolder<Block, Block> TRUNCATED_PUMICE_WALL = REGISTRY.register("truncated_pumice_wall", TruncatedPumiceWallBlock::new);
	public static final DeferredHolder<Block, Block> PUMICE_SLAB = REGISTRY.register("pumice_slab", PumiceSlabBlock::new);
	public static final DeferredHolder<Block, Block> PUMICE_STAIRS = REGISTRY.register("pumice_stairs", PumiceStairsBlock::new);
	public static final DeferredHolder<Block, Block> PUMICE_WALL = REGISTRY.register("pumice_wall", PumiceWallBlock::new);
	public static final DeferredHolder<Block, Block> COBBLED_SANDSLATE_SLAB = REGISTRY.register("cobbled_sandslate_slab", CobbledSandslateSlabBlock::new);
	public static final DeferredHolder<Block, Block> COBBLED_SANDSLATE_STAIRS = REGISTRY.register("cobbled_sandslate_stairs", CobbledSandslateStairsBlock::new);
	public static final DeferredHolder<Block, Block> COBBLED_SANDSLATE_WALL = REGISTRY.register("cobbled_sandslate_wall", CobbledSandslateWallBlock::new);
	public static final DeferredHolder<Block, Block> POLISHED_SANDSLATE_SLAB = REGISTRY.register("polished_sandslate_slab", PolishedSandslateSlabBlock::new);
	public static final DeferredHolder<Block, Block> POLISHED_SANDSLATE_STAIRS = REGISTRY.register("polished_sandslate_stairs", PolishedSandslateStairsBlock::new);
	public static final DeferredHolder<Block, Block> POLISHED_SANDSLATE_WALL = REGISTRY.register("polished_sandslate_wall", PolishedSandslateWallBlock::new);
	public static final DeferredHolder<Block, Block> SANDSLATE_BRICKS_SLAB = REGISTRY.register("sandslate_bricks_slab", SandslateBricksSlabBlock::new);
	public static final DeferredHolder<Block, Block> SANDSLATE_BRICKS_STAIRS = REGISTRY.register("sandslate_bricks_stairs", SandslateBricksStairsBlock::new);
	public static final DeferredHolder<Block, Block> SANDSLATE_BRICKS_WALL = REGISTRY.register("sandslate_bricks_wall", SandslateBricksWallBlock::new);
	public static final DeferredHolder<Block, Block> GINGERBREAD_BLOCK = REGISTRY.register("gingerbread_block", GingerbreadBlockBlock::new);
	public static final DeferredHolder<Block, Block> RAW_GINGERBREAD_BLOCK = REGISTRY.register("raw_gingerbread_block", RawGingerbreadBlockBlock::new);
	public static final DeferredHolder<Block, Block> GINGERBREAD_BRICKS = REGISTRY.register("gingerbread_bricks", GingerbreadBricksBlock::new);
	public static final DeferredHolder<Block, Block> BLUE_ROSE = REGISTRY.register("blue_rose", BlueRoseBlock::new);
	public static final DeferredHolder<Block, Block> SUNSHROOM = REGISTRY.register("sunshroom", SunshroomBlock::new);
	public static final DeferredHolder<Block, Block> MOONSHROOM = REGISTRY.register("moonshroom", MoonshroomBlock::new);
	public static final DeferredHolder<Block, Block> BLACK_PLANKS = REGISTRY.register("black_planks", BlackPlanksBlock::new);
	public static final DeferredHolder<Block, Block> BLUE_PLANKS = REGISTRY.register("blue_planks", BluePlanksBlock::new);
	public static final DeferredHolder<Block, Block> BROWN_PLANKS = REGISTRY.register("brown_planks", BrownPlanksBlock::new);
	public static final DeferredHolder<Block, Block> CYAN_PLANKS = REGISTRY.register("cyan_planks", CyanPlanksBlock::new);
	public static final DeferredHolder<Block, Block> GRAY_PLANKS = REGISTRY.register("gray_planks", GrayPlanksBlock::new);
	public static final DeferredHolder<Block, Block> GREEN_PLANKS = REGISTRY.register("green_planks", GreenPlanksBlock::new);
	public static final DeferredHolder<Block, Block> LIGHT_BLUE_PLANKS = REGISTRY.register("light_blue_planks", LightBluePlanksBlock::new);
	public static final DeferredHolder<Block, Block> LIGHT_GRAY_PLANKS = REGISTRY.register("light_gray_planks", LightGrayPlanksBlock::new);
	public static final DeferredHolder<Block, Block> LIME_PLANKS = REGISTRY.register("lime_planks", LimePlanksBlock::new);
	public static final DeferredHolder<Block, Block> MAGENTA_PLANKS = REGISTRY.register("magenta_planks", MagentaPlanksBlock::new);
	public static final DeferredHolder<Block, Block> ORANGE_PLANKS = REGISTRY.register("orange_planks", OrangePlanksBlock::new);
	public static final DeferredHolder<Block, Block> PINK_PLANKS = REGISTRY.register("pink_planks", PinkPlanksBlock::new);
	public static final DeferredHolder<Block, Block> PURPLE_PLANKS = REGISTRY.register("purple_planks", PurplePlanksBlock::new);
	public static final DeferredHolder<Block, Block> RED_PLANKS = REGISTRY.register("red_planks", RedPlanksBlock::new);
	public static final DeferredHolder<Block, Block> WHITE_PLANKS = REGISTRY.register("white_planks", WhitePlanksBlock::new);
	public static final DeferredHolder<Block, Block> YELLOW_PLANKS = REGISTRY.register("yellow_planks", YellowPlanksBlock::new);
	public static final DeferredHolder<Block, Block> EUCALYPTUS_WOOD = REGISTRY.register("eucalyptus_wood", EucalyptusWoodBlock::new);
	public static final DeferredHolder<Block, Block> EUCALYPTUS_LOG = REGISTRY.register("eucalyptus_log", EucalyptusLogBlock::new);
	public static final DeferredHolder<Block, Block> EUCALYPTUS_PLANKS = REGISTRY.register("eucalyptus_planks", EucalyptusPlanksBlock::new);
	public static final DeferredHolder<Block, Block> EUCALYPTUS_LEAVES = REGISTRY.register("eucalyptus_leaves", EucalyptusLeavesBlock::new);
	public static final DeferredHolder<Block, Block> EUCALYPTUS_STAIRS = REGISTRY.register("eucalyptus_stairs", EucalyptusStairsBlock::new);
	public static final DeferredHolder<Block, Block> EUCALYPTUS_SLAB = REGISTRY.register("eucalyptus_slab", EucalyptusSlabBlock::new);
	public static final DeferredHolder<Block, Block> EUCALYPTUS_FENCE = REGISTRY.register("eucalyptus_fence", EucalyptusFenceBlock::new);
	public static final DeferredHolder<Block, Block> EUCALYPTUS_FENCE_GATE = REGISTRY.register("eucalyptus_fence_gate", EucalyptusFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> EUCALYPTUS_PRESSURE_PLATE = REGISTRY.register("eucalyptus_pressure_plate", EucalyptusPressurePlateBlock::new);
	public static final DeferredHolder<Block, Block> EUCALYPTUS_BUTTON = REGISTRY.register("eucalyptus_button", EucalyptusButtonBlock::new);
	public static final DeferredHolder<Block, Block> STRIPPED_EUCALYPTUS_WOOD = REGISTRY.register("stripped_eucalyptus_wood", StrippedEucalyptusWoodBlock::new);
	public static final DeferredHolder<Block, Block> STRIPPED_EUCALYPTUS_LOG = REGISTRY.register("stripped_eucalyptus_log", StrippedEucalyptusLogBlock::new);
	public static final DeferredHolder<Block, Block> EUCALYPTUS_PARQUET = REGISTRY.register("eucalyptus_parquet", EucalyptusParquetBlock::new);
	public static final DeferredHolder<Block, Block> CHERRY_PARQUET = REGISTRY.register("cherry_parquet", CherryParquetBlock::new);
	public static final DeferredHolder<Block, Block> EUCALYPTUS_DOOR = REGISTRY.register("eucalyptus_door", EucalyptusDoorBlock::new);
	public static final DeferredHolder<Block, Block> EUCALYPTUS_TRAPDOOR = REGISTRY.register("eucalyptus_trapdoor", EucalyptusTrapdoorBlock::new);
	public static final DeferredHolder<Block, Block> BLACK_FENCE = REGISTRY.register("black_fence", BlackFenceBlock::new);
	public static final DeferredHolder<Block, Block> BLUE_FENCE = REGISTRY.register("blue_fence", BlueFenceBlock::new);
	public static final DeferredHolder<Block, Block> BROWN_FENCE = REGISTRY.register("brown_fence", BrownFenceBlock::new);
	public static final DeferredHolder<Block, Block> CYAN_FENCE = REGISTRY.register("cyan_fence", CyanFenceBlock::new);
	public static final DeferredHolder<Block, Block> GRAY_FENCE = REGISTRY.register("gray_fence", GrayFenceBlock::new);
	public static final DeferredHolder<Block, Block> GREEN_FENCE = REGISTRY.register("green_fence", GreenFenceBlock::new);
	public static final DeferredHolder<Block, Block> LIGHT_BLUE_FENCE = REGISTRY.register("light_blue_fence", LightBlueFenceBlock::new);
	public static final DeferredHolder<Block, Block> LIGHT_GRAY_FENCE = REGISTRY.register("light_gray_fence", LightGrayFenceBlock::new);
	public static final DeferredHolder<Block, Block> LIME_FENCE = REGISTRY.register("lime_fence", LimeFenceBlock::new);
	public static final DeferredHolder<Block, Block> MAGENTA_FENCE = REGISTRY.register("magenta_fence", MagentaFenceBlock::new);
	public static final DeferredHolder<Block, Block> ORANGE_FENCE = REGISTRY.register("orange_fence", OrangeFenceBlock::new);
	public static final DeferredHolder<Block, Block> PINK_FENCE = REGISTRY.register("pink_fence", PinkFenceBlock::new);
	public static final DeferredHolder<Block, Block> PURPLE_FENCE = REGISTRY.register("purple_fence", PurpleFenceBlock::new);
	public static final DeferredHolder<Block, Block> RED_FENCE = REGISTRY.register("red_fence", RedFenceBlock::new);
	public static final DeferredHolder<Block, Block> WHITE_FENCE = REGISTRY.register("white_fence", WhiteFenceBlock::new);
	public static final DeferredHolder<Block, Block> YELLOW_FENCE = REGISTRY.register("yellow_fence", YellowFenceBlock::new);
	public static final DeferredHolder<Block, Block> BLACK_FENCE_GATE = REGISTRY.register("black_fence_gate", BlackFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> BLUE_FENCE_GATE = REGISTRY.register("blue_fence_gate", BlueFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> BROWN_FENCE_GATE = REGISTRY.register("brown_fence_gate", BrownFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> CYAN_FENCE_GATE = REGISTRY.register("cyan_fence_gate", CyanFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> GRAY_FENCE_GATE = REGISTRY.register("gray_fence_gate", GrayFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> GREEN_FENCE_GATE = REGISTRY.register("green_fence_gate", GreenFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> LIGHT_BLUE_FENCE_GATE = REGISTRY.register("light_blue_fence_gate", LightBlueFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> LIGHT_GRAY_FENCE_GATE = REGISTRY.register("light_gray_fence_gate", LightGrayFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> LIME_FENCE_GATE = REGISTRY.register("lime_fence_gate", LimeFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> MAGENTA_FENCE_GATE = REGISTRY.register("magenta_fence_gate", MagentaFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> ORANGE_FENCE_GATE = REGISTRY.register("orange_fence_gate", OrangeFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> PINK_FENCE_GATE = REGISTRY.register("pink_fence_gate", PinkFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> PURPLE_FENCE_GATE = REGISTRY.register("purple_fence_gate", PurpleFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> RED_FENCE_GATE = REGISTRY.register("red_fence_gate", RedFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> WHITE_FENCE_GATE = REGISTRY.register("white_fence_gate", WhiteFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> YELLOW_FENCE_GATE = REGISTRY.register("yellow_fence_gate", YellowFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> BLACK_STAIRS = REGISTRY.register("black_stairs", BlackStairsBlock::new);
	public static final DeferredHolder<Block, Block> BLUE_STAIRS = REGISTRY.register("blue_stairs", BlueStairsBlock::new);
	public static final DeferredHolder<Block, Block> BROWN_STAIRS = REGISTRY.register("brown_stairs", BrownStairsBlock::new);
	public static final DeferredHolder<Block, Block> CYAN_STAIRS = REGISTRY.register("cyan_stairs", CyanStairsBlock::new);
	public static final DeferredHolder<Block, Block> GRAY_STAIRS = REGISTRY.register("gray_stairs", GrayStairsBlock::new);
	public static final DeferredHolder<Block, Block> GREEN_STAIRS = REGISTRY.register("green_stairs", GreenStairsBlock::new);
	public static final DeferredHolder<Block, Block> LIGHT_BLUE_STAIRS = REGISTRY.register("light_blue_stairs", LightBlueStairsBlock::new);
	public static final DeferredHolder<Block, Block> LIGHT_GRAY_STAIRS = REGISTRY.register("light_gray_stairs", LightGrayStairsBlock::new);
	public static final DeferredHolder<Block, Block> LIME_STAIRS = REGISTRY.register("lime_stairs", LimeStairsBlock::new);
	public static final DeferredHolder<Block, Block> MAGENTA_STAIRS = REGISTRY.register("magenta_stairs", MagentaStairsBlock::new);
	public static final DeferredHolder<Block, Block> ORANGE_STAIRS = REGISTRY.register("orange_stairs", OrangeStairsBlock::new);
	public static final DeferredHolder<Block, Block> PINK_STAIRS = REGISTRY.register("pink_stairs", PinkStairsBlock::new);
	public static final DeferredHolder<Block, Block> PURPLE_STAIRS = REGISTRY.register("purple_stairs", PurpleStairsBlock::new);
	public static final DeferredHolder<Block, Block> RED_STAIRS = REGISTRY.register("red_stairs", RedStairsBlock::new);
	public static final DeferredHolder<Block, Block> WHITE_STAIRS = REGISTRY.register("white_stairs", WhiteStairsBlock::new);
	public static final DeferredHolder<Block, Block> YELLOW_STAIRS = REGISTRY.register("yellow_stairs", YellowStairsBlock::new);
	public static final DeferredHolder<Block, Block> BLACK_SLAB = REGISTRY.register("black_slab", BlackSlabBlock::new);
	public static final DeferredHolder<Block, Block> BLUE_SLAB = REGISTRY.register("blue_slab", BlueSlabBlock::new);
	public static final DeferredHolder<Block, Block> BROWN_SLAB = REGISTRY.register("brown_slab", BrownSlabBlock::new);
	public static final DeferredHolder<Block, Block> CYAN_SLAB = REGISTRY.register("cyan_slab", CyanSlabBlock::new);
	public static final DeferredHolder<Block, Block> GRAY_SLAB = REGISTRY.register("gray_slab", GraySlabBlock::new);
	public static final DeferredHolder<Block, Block> GREEN_SLAB = REGISTRY.register("green_slab", GreenSlabBlock::new);
	public static final DeferredHolder<Block, Block> LIGHT_BLUE_SLAB = REGISTRY.register("light_blue_slab", LightBlueSlabBlock::new);
	public static final DeferredHolder<Block, Block> LIGHT_GRAY_SLAB = REGISTRY.register("light_gray_slab", LightGraySlabBlock::new);
	public static final DeferredHolder<Block, Block> LIME_SLAB = REGISTRY.register("lime_slab", LimeSlabBlock::new);
	public static final DeferredHolder<Block, Block> MAGENTA_SLAB = REGISTRY.register("magenta_slab", MagentaSlabBlock::new);
	public static final DeferredHolder<Block, Block> ORANGE_SLAB = REGISTRY.register("orange_slab", OrangeSlabBlock::new);
	public static final DeferredHolder<Block, Block> PINK_SLAB = REGISTRY.register("pink_slab", PinkSlabBlock::new);
	public static final DeferredHolder<Block, Block> PURPLE_SLAB = REGISTRY.register("purple_slab", PurpleSlabBlock::new);
	public static final DeferredHolder<Block, Block> RED_SLAB = REGISTRY.register("red_slab", RedSlabBlock::new);
	public static final DeferredHolder<Block, Block> WHITE_SLAB = REGISTRY.register("white_slab", WhiteSlabBlock::new);
	public static final DeferredHolder<Block, Block> YELLOW_SLAB = REGISTRY.register("yellow_slab", YellowSlabBlock::new);
	public static final DeferredHolder<Block, Block> EUCALYPTUS_SAPLING = REGISTRY.register("eucalyptus_sapling", EucalyptusSaplingBlock::new);
	public static final DeferredHolder<Block, Block> GRAPE_VINE_0 = REGISTRY.register("grape_vine_0", GrapeVine0Block::new);
	public static final DeferredHolder<Block, Block> GRAPE_VINE_1 = REGISTRY.register("grape_vine_1", GrapeVine1Block::new);
	public static final DeferredHolder<Block, Block> ASH_BLOCK = REGISTRY.register("ash_block", AshBlockBlock::new);
	public static final DeferredHolder<Block, Block> ASH_COVER = REGISTRY.register("ash_cover", AshCoverBlock::new);
	public static final DeferredHolder<Block, Block> FERMENTATION_BARREL = REGISTRY.register("fermentation_barrel", FermentationBarrelBlock::new);
	public static final DeferredHolder<Block, Block> BROWN_BEAR_CARPET = REGISTRY.register("brown_bear_carpet", BrownBearCarpetBlock::new);
	public static final DeferredHolder<Block, Block> POLAR_BEAR_CARPET = REGISTRY.register("polar_bear_carpet", PolarBearCarpetBlock::new);
	public static final DeferredHolder<Block, Block> WHITE_ROSE_BUSH = REGISTRY.register("white_rose_bush", WhiteRoseBushBlock::new);
	public static final DeferredHolder<Block, Block> PINK_ROSE_BUSH = REGISTRY.register("pink_rose_bush", PinkRoseBushBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_WOOD = REGISTRY.register("mulberry_wood", MulberryWoodBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_LOG = REGISTRY.register("mulberry_log", MulberryLogBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_PLANKS = REGISTRY.register("mulberry_planks", MulberryPlanksBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_STAIRS = REGISTRY.register("mulberry_stairs", MulberryStairsBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_SLAB = REGISTRY.register("mulberry_slab", MulberrySlabBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_FENCE = REGISTRY.register("mulberry_fence", MulberryFenceBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_FENCE_GATE = REGISTRY.register("mulberry_fence_gate", MulberryFenceGateBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_PRESSURE_PLATE = REGISTRY.register("mulberry_pressure_plate", MulberryPressurePlateBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_BUTTON = REGISTRY.register("mulberry_button", MulberryButtonBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_SAPLING = REGISTRY.register("mulberry_sapling", MulberrySaplingBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_LEAVES_WITHOUT_WHITE = REGISTRY.register("mulberry_leaves_without_white", MulberryLeavesWithoutWhiteBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_LEAVES_WITHOUT_BLACK = REGISTRY.register("mulberry_leaves_without_black", MulberryLeavesWithoutBlackBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_LEAVES_WITH_WHITE = REGISTRY.register("mulberry_leaves_with_white", MulberryLeavesWithWhiteBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_LEAVES_WITH_BLACK = REGISTRY.register("mulberry_leaves_with_black", MulberryLeavesWithBlackBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_PARQUET = REGISTRY.register("mulberry_parquet", MulberryParquetBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_DOOR = REGISTRY.register("mulberry_door", MulberryDoorBlock::new);
	public static final DeferredHolder<Block, Block> MULBERRY_TRAPDOOR = REGISTRY.register("mulberry_trapdoor", MulberryTrapdoorBlock::new);
	public static final DeferredHolder<Block, Block> STRIPPED_MULBERRY_WOOD = REGISTRY.register("stripped_mulberry_wood", StrippedMulberryWoodBlock::new);
	public static final DeferredHolder<Block, Block> STRIPPED_MULBERRY_LOG = REGISTRY.register("stripped_mulberry_log", StrippedMulberryLogBlock::new);
	public static final DeferredHolder<Block, Block> RASPBERRY_BUSH_0 = REGISTRY.register("raspberry_bush_0", RaspberryBush0Block::new);
	public static final DeferredHolder<Block, Block> RASPBERRY_BUSH_1 = REGISTRY.register("raspberry_bush_1", RaspberryBush1Block::new);
	public static final DeferredHolder<Block, Block> RASPBERRY_BUSH_2 = REGISTRY.register("raspberry_bush_2", RaspberryBush2Block::new);
	public static final DeferredHolder<Block, Block> RASPBERRY_BUSH_3 = REGISTRY.register("raspberry_bush_3", RaspberryBush3Block::new);
	public static final DeferredHolder<Block, Block> CATTAIL = REGISTRY.register("cattail", CattailBlock::new);
	public static final DeferredHolder<Block, Block> RYE_STAGE_0 = REGISTRY.register("rye_stage_0", RyeStage0Block::new);
	public static final DeferredHolder<Block, Block> RYE_STAGE_1 = REGISTRY.register("rye_stage_1", RyeStage1Block::new);
	public static final DeferredHolder<Block, Block> RYE_STAGE_2 = REGISTRY.register("rye_stage_2", RyeStage2Block::new);
	public static final DeferredHolder<Block, Block> RYE_STAGE_3 = REGISTRY.register("rye_stage_3", RyeStage3Block::new);
	public static final DeferredHolder<Block, Block> RYE_STAGE_4 = REGISTRY.register("rye_stage_4", RyeStage4Block::new);
	public static final DeferredHolder<Block, Block> RYE_STAGE_5 = REGISTRY.register("rye_stage_5", RyeStage5Block::new);
	public static final DeferredHolder<Block, Block> RYE_STAGE_6 = REGISTRY.register("rye_stage_6", RyeStage6Block::new);
	public static final DeferredHolder<Block, Block> RYE_STAGE_7 = REGISTRY.register("rye_stage_7", RyeStage7Block::new);

	// Start of user code block custom blocks
	// End of user code block custom blocks
	@EventBusSubscriber(bus = EventBusSubscriber.Bus.MOD, value = Dist.CLIENT)
	public static class BlocksClientSideHandler {
		@SubscribeEvent
		public static void blockColorLoad(RegisterColorHandlersEvent.Block event) {
			EucalyptusLeavesBlock.blockColorLoad(event);
		}

		@SubscribeEvent
		public static void itemColorLoad(RegisterColorHandlersEvent.Item event) {
			EucalyptusLeavesBlock.itemColorLoad(event);
		}
	}
}
